{"version":3,"sources":["Square.jsx","Board.jsx","Game.jsx","BoardUseContext.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","lines","initialState","history","Array","fill","undefined","nextStep","isNext","getForwardDiagonal","currentBoard","slice","concat","transposeForwardDiagonal","cell","findOffensiveMoves","findBestMoves","findDefensiveMoves","symbol","rowWinningMove","possibleMove","getRows","colWinningMoves","getCols","Math","floor","forwardDiagonalMoves","console","log","backwardDiagonalMoves","transposeBackwardDiagonal","getbackwardDiagonal","rows","filtered","map","row","index","twoInTheSameRow","filter","val","length","rowIndex","twoSymbols","ele","anEmptyCell","findIndex","calculateWinner","result","line","a","b","c","isGameOver","Game","useState","state","setState","handleClick","current","useEffect","offensiveMove","defensiveMove","findNextMove","moves","step","move","desc","key","jumpTo","status","getStatus","React","createContext","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f9db821.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Square(props) {\n\n    return (\n      <button className=\"square\"\n        onClick={props.onClick}>\n        {props.value}\n      </button>\n      \n    );\n}\n\nexport default Square;","import React, { useState } from 'react';\nimport Square from './Square';\n\nfunction Board(props) {\n  const renderSquare = (i) => {\n    return (\n    <Square\n      value={props.squares[i]}\n      onClick={() => props.onClick(i)}\n    />\n    )\n  }\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;","// https://reactjs.org/tutorial/tutorial.html#lifting-state-up\nimport React, { useState, useEffect } from 'react';\nimport Board from './Board';\n\nconst lines = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst initialState = {\n  history: [{squares: Array(9).fill(undefined)}],\n  nextStep: 0,\n  isNext: true\n};\n\n\n/**\n * Get row from the 3x3 board\n * @param {*} currentBoard \n */\nconst getRows = (currentBoard) => {\n  return [\n    currentBoard.slice(0, 3),\n    currentBoard.slice(3, 6),\n    currentBoard.slice(6, 9)\n  ];\n\n}\n\n/**\n * Get columns from the 3x3 board\n * @param {*} currentBoard \n */\nconst getCols = (currentBoard) => {\n  return [\n    currentBoard.slice(0, 1).concat(currentBoard.slice(3, 4)).concat(currentBoard.slice(6, 7)),\n    currentBoard.slice(1, 2).concat(currentBoard.slice(4, 5)).concat(currentBoard.slice(7, 8)),\n    currentBoard.slice(2, 3).concat(currentBoard.slice(5, 6)).concat(currentBoard.slice(8, 9)),\n  ];\n}\n\nconst getForwardDiagonal = (currentBoard) => {\n  return [\n    currentBoard.slice(0, 1).concat(currentBoard.slice(4, 5)).concat(currentBoard.slice(8, 9))\n  ];\n}\n\nconst getbackwardDiagonal = (currentBoard) => {\n  return [\n    currentBoard.slice(2, 3).concat(currentBoard.slice(4, 5)).concat(currentBoard.slice(6, 7))\n  ];\n}\n\nconst transposeForwardDiagonal = (cell) => {\n  if (cell === -1) return -1;\n  else if (cell === 0) return 0;\n  else if (cell === 1) return 4;\n  else return 8;\n}\n\nconst transposeBackwardDiagonal = (cell) => {\n  if (cell === -1) return -1;\n  else if (cell === 0) return 2;\n  else if (cell === 1) return 4;\n  else return 6;\n}\n\n/**\n * Transpose row back to col.\n * @param {*} cell \n */\nconst transpose = (cell) => {\n  if (cell === -1) return -1;\n  const col = Math.floor(cell / 3);\n  const row = cell % 3;\n  return row * 3 + col;\n}\n\n\n/**\n * computer player move\n * 1. Find a posible wining move by row\n * 2. Find a posible winning move by col\n * 3. If none is found.  Find a defensive move by row\n * 4. Find a defensive move by col\n * 5. If none is found, just pick an empty cell.\n * @param {*} currentBoard \n */\nconst findNextMove = (currentBoard) => {\n  const offensiveMove = findOffensiveMoves(currentBoard);\n  if (offensiveMove > -1) return offensiveMove;\n\n  const defensiveMove = findDefensiveMoves(currentBoard);\n  if (defensiveMove > -1) return defensiveMove;\n\n  return currentBoard.findIndex((value) => value === undefined);\n}\n\nconst findOffensiveMoves = (currentBoard) => {\n  return findBestMoves(currentBoard, 'O');\n}\n\nconst findDefensiveMoves = (currentBoard) => {\n  return findBestMoves(currentBoard, 'X');\n}\n\nconst findBestMoves = (currentBoard, symbol) => {\n  const rowWinningMove = possibleMove(getRows(currentBoard), symbol);\n  if (rowWinningMove >= 0) return rowWinningMove;\n  \n  const colWinningMoves = transpose(possibleMove(getCols(currentBoard), symbol));\n  if (colWinningMoves >= 0) return colWinningMoves;\n\n  const forwardDiagonalMoves = transposeForwardDiagonal(\n    possibleMove(getForwardDiagonal(currentBoard), symbol));\n\n  console.log(transposeForwardDiagonal(possibleMove(getForwardDiagonal(currentBoard), symbol)));\n  if (forwardDiagonalMoves >= 0) return forwardDiagonalMoves;\n \n  const backwardDiagonalMoves = transposeBackwardDiagonal(\n    possibleMove(getbackwardDiagonal(currentBoard), symbol));\n\n  if (backwardDiagonalMoves >= 0) return backwardDiagonalMoves;\n\n  return -1;\n}\n\n/**\n * Search for two symbols in the same row.\n * @param {*} rows - an array or rows.\n * @param {*} symbol - X or O\n */\nconst possibleMove = (rows, symbol) => {\n  // console.log(rows);\n  const indices = rows\n      .map((row, index) => twoInTheSameRow(row, index, symbol))\n      .filter(val => val >= 0);\n\n  const filtered = indices.filter(val => val >= 0);\n\n  if (filtered.length <= 0) return -1;\n\n  return filtered[0];\n}\n\n/**\n * Check for two same player move in the same row.\n * @param {*} row \n * @param {*} rowIndex \n * @param {*} symbol \n */\nconst twoInTheSameRow = (row, rowIndex, symbol) => {\n  const twoSymbols = row.filter(ele => ele === symbol).length === 2;\n  const anEmptyCell = row.filter(ele => ele === undefined).length === 1;\n  if(twoSymbols && anEmptyCell) {\n    return rowIndex * 3 + row.findIndex(ele => ele === undefined);\n  }\n  return -1;\n}\n\nconst calculateWinner = (squares) => {\n  if (squares.length <= 0) return null;\n  const result = lines.filter(line => {\n    const [a, b, c] = line;\n    return squares[a] && squares[a] === squares[b] && squares[a] === squares[c];\n  });\n\n  if (result.length> 0) return result[0];\n  return null;\n}\n\nconst isGameOver = (squares) => {\n  return squares.filter(ele => ele !== undefined).length === squares.length;\n}\n\nfunction Game() {\n  \n  const [state, setState] = useState(initialState);\n\n  const handleClick = (i) => {\n    const history = state.history;\n    const current = history[history.length -1];\n    const squares = current.squares.slice();\n    const gameOver = isGameOver(current.squares);\n    if (gameOver) return;\n    if (calculateWinner(squares)) return;\n\n    squares[i] = state.isNext ? 'X' : 'O';\n\n    setState( { \n        history: state.history.concat([{squares: squares}]), \n        nextStep: state.history.length,\n        isNext: !state.isNext\n      });\n  }\n\n  useEffect(() => {\n    if (!state.isNext) {\n      handleClick(findNextMove(state.history[state.nextStep].squares));\n    }\n  });\n\n  \n  const getStatus = () => {\n    const current = state.history[state.nextStep];\n    const winner = calculateWinner(current.squares);\n    if (winner) return 'Winner ' + (state.isNext? 'O' : 'X');\n    const gameOver = isGameOver(current.squares);\n    if (gameOver) return 'Game is draw!!! ';\n    return 'Next player: ' + (state.isNext? 'X' : 'O');\n  }\n\n  const moves = state.history.map((step, move) => {\n    const desc = move ? 'Go to move #' + move : 'Go to game start';\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{desc}</button>\n      </li>\n    );\n  });\n\n  const jumpTo = (move) => {\n    setState({\n      history: state.history, \n      nextStep: move,\n      isNext: !state.isNext\n    });\n  }\n\n  const current = state.history[state.nextStep];\n  const status = getStatus();\n  \n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          squares={current.squares}\n          onClick={(i) => handleClick(i)}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div>{status}</div>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  )\n}\n\nexport default Game;","import React from 'react';\nimport Square from './Square';\nimport { useContext } from 'react';\nimport {MoveContext} from './App';\nimport { useState } from 'react';\n\nfunction Board() {\n  let context = useContext(MoveContext);\n  let [state, setState] = useState(context);\n\n  const handleClick = (i) => {\n    const winner = calculateWinner(state.squares);\n    if (winner) return;\n    \n    const local = state.squares.slice();\n    local[i] = state.isNext ? 'X' : 'O';\n\n    setState({\n      squares: local, \n      isNext: !state.isNext,\n    });\n    console.log(state);\n  }\n\n  const renderSquare = (i) => {\n    return (\n    <Square\n      onClick={() => handleClick(i)}\n      value={state.squares[i]}\n    />\n    )\n  }\n\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  const calculateWinner = (squares) => {\n    const result = lines.filter(line => {\n      const [a, b, c] = line;\n      return squares[a] && squares[a] === squares[b] && squares[a] === squares[c];\n    });\n\n    if (result.length> 0) return result[0];\n    return null;\n  }\n\n  const getStatus = () => {\n    const winner = calculateWinner(state.squares);\n    if (winner) return 'Winner ' + (state.isNext? 'O' : 'X');\n    else return 'Next player: ' + (state.isNext? 'X' : 'O');\n  }\n\n  return (\n    <div>\n      <div className=\"status\">{getStatus()}</div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;","import React from 'react';\nimport Game from './Game';\nimport BoardUseContext from './BoardUseContext';\nimport './App.css';\n\nconst move = {\n  squares: Array(9).fill(null),\n  isNext: true,\n}\n\nexport const MoveContext = React.createContext(move);\n\nfunction App() {\n\n  // return (\n  //   <div className=\"App\">\n  //     <header className=\"App-header\">\n  //     <MoveContext.Provider value={move}>\n  //       <Board/>\n  //       </MoveContext.Provider>\n  //     </header>\n  //   </div>\n  // );\n\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Game/>\n        </header>\n      </div>\n    );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}